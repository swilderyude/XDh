# Read data
TelephoneData<-read.csv("/Users/zhao/Desktop/大三课作业/数据挖掘实验/Telephone.csv", head = TRUE, encoding = 'utf-8',fileEncoding = 'GBK')
TelephoneData
head(TelephoneData) #查看属性
sum(is.na(TelephoneData)) #na看是否有缺失值
##understand data structure and relationship between two features
table(TelephoneData$流失) #流失或不流失，table形成表，$是的，看0和1个数
table(TelephoneData[,c("开通月数","流失")]) #取列数，但不是很好的可视化
par(mfrow=c(1,2)) ##将画板变为1行2列的样式，让两张图在同一行分布
hist(TelephoneData$开通月数,main = '开通月数分布',xlab = "开通月数",ylab = "流失") #hist直方图，main标题
hist(TelephoneData$开通月数,main = '开通月数分布',xlab = "开通月数",ylab = "套餐类型")
#compare str() and summary()
str(TelephoneData)
summary(TelephoneData)
#check: Are there missing value in this dataset?
sum(!complete.cases(TelephoneData)) #！非complete完整，查看缺失
# fix the seed so that every time running the model we do not work with different samples
set.seed(1234)  #初始化随机数发生器
nrow(TelephoneData)
index = sample(2, nrow(TelephoneData), replace = TRUE, prob = c(0.7,0.3)) #有放回
#采样范围1:2，size：采样次数 nrow()
index
typeof(index)
TrainData = TelephoneData[index == 1, ]
TrainData
nrow(TrainData)
TestData = TelephoneData[index == 2,]
TestData
nrow(TestData)
# Construct a decision tree model by rpart()
# from "rpart" package
#install.packages("rpart")
library(rpart)
CTl<-rpart.control(minsplit = 10, maxcompete=4,xval=10,maxdepth=30,cp = 0)
#Telephone_rpart = rpart(流失~., data = TrainData,method = "class", control = rpart.control(minsplit = 10, cp = 0))
rpart.model = rpart(流失~., data = TrainData,method = "class",parms = list(split="information"), control = CTl) #default
rpart.model
# TO plot rpart decision tree we can either use
# rpart.plot() function from rpart.plot package
# or fancyRpartPlot() function from "rattle" package.
install.packages("rpart.plot")
#par(mfrow=c(1,1))
#install.packages("rpart.plot")
library(rpart.plot) #--- If the packages rattle is installed, it has rpart.plot in it
rpart.plot(rpart.model)
rpart.plot(rpart.model)
summary(rpart.model)
rpart.model$cptable
rpart.model$variable.importance
# or plot tree by prp()
prp(rpart.model, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10)
#how many leaves
length(rpart.model$frame$var[rpart.model$frame$var == "<leaf>"])
# or
install.packages("rattle")
# or
#install.packages("rattle")
#rattle强大数据挖掘工具，图形交互式可视化界面
library(rattle)
fancyRpartPlot(rpart.model,palettes=c("Greys", "Blues"))
#Predict the probablity of class: "0" or "1"
(predict(rpart.model))
#  Predict TrainData by generated model above
train_predict=predict(rpart.model, type = "class")  #分类，预测
train_predict
is.factor(train_predict)
#因子用来存储类别变量(categorical variables)和有序变量
#这类变量不能用来计算而只能用来分类或者计数
#Check Actual Class for TrainData
typeof(TelephoneData$流失)
train.predict=cbind(TrainData,train_predict) #加上一列
head(train.predict)
#Compare Predicted vs Actual??confusion matrix
(train_confusion=table(train_predict, TrainData$流失, dnn = c("Predicted", "Actual"))) #加括号表示计算完马上显示
(Erorr.train=(sum(train_confusion)-sum(diag(train_confusion)))/sum(train_confusion)) #错误率计算，diag对角线
# Or use confusionMatrix() to evaluate
#caret: Classification and Regression Training
install.packages("caret")
library(caret)
# Or use confusionMatrix() to evaluate
#caret: Classification and Regression Training
install.packages("caret")
# Or use confusionMatrix() to evaluate
#caret: Classification and Regression Training
install.packages("caret")
install.packages("caret")
# Or use confusionMatrix() to evaluate
#caret: Classification and Regression Training
install.packages("caret")
library(caret)
# Or use confusionMatrix() to evaluate
#caret: Classification and Regression Training
install.packages("caret")
library(caret)
library(caret)
# Or use confusionMatrix() to evaluate
#caret: Classification and Regression Training
install.packages("caret")
library(caret)
pred.train <- predict(rpart.model,TrainData,type = "class")
CM<-confusionMatrix(pred.train, as.factor(TrainData$流失)) # # 创建训练集数据与其预测结果的混淆矩阵
CM #计算完成了相关值
#Pos Pred Value : 0.9480：TPR=TP/(TP+FP)
#Neg Pred Value : 0.8065 ：FPR=TN/(TN+FN)
#Prevalence : 0.7135: (TP+FN)/(P+N)
#Detection Rate : 0.6533:TP/P+N
#Detection Prevalence : 0.6891 :(TP+FP)/(P+N)
#Balanced Accuracy:(sensitivity+specificity)/2
typeof(CM)
(ConfMatrix<-CM$table)
typeof(ConfMatrix)
# predict testing data
test_predict=predict(rpart.model,newdata = TestData,type="class")
test_predict
(test_confusion=table(test_predict, TestData$流失, dnn = c("Predicted", "Actual")))
(Erorr.rpart=(sum(test_confusion)-sum(diag(test_confusion)))/sum(test_confusion))
sensitivity(train_predict,as.factor(TrainData$流失))
precision(train_predict,as.factor(TrainData$流失))
recall(train_predict,as.factor(TrainData$流失))
#  Classification and Regression Training package
library(caret)
train_predict<-as.factor(train_predict)
is.factor(TrainData$流失)
TrainData$流失<-as.factor(TrainData$流失)
TestData$流失<-as.factor(TestData$流失)
sensitivity(train_predict,TrainData$流失)
specificity(train_predict,TrainData$流失)
sensitivity(test_predict,TestData$流失)
specificity(test_predict,TestData$流失)
# show CP parameters for the tree pruning
#交叉验证的估计误差（“xerror”），标准误差(“xstd”)，
#平均相对误差=xerror±xstd 。
printcp(rpart.model)
plotcp(rpart.model)
grid() #加上网格
#select CP with minimum error by CV
rpart.model$cptable
xerr <-rpart.model$cptable[,"xerror"]
xerr
minxerr <- which.min(xerr)
minxerr
mincp <-rpart.model$cptable[minxerr, "CP"]
mincp
# prune the tree
set.seed(1234)
rpart.prune<-prune(rpart.model,cp=mincp)
rpart.prune  #标记为叶节点
rpart.plot(rpart.prune)
#or
fancyRpartPlot(rpart.prune)
#***********************ROC***************************************
#*****************************************************************
install.packages("ROCR")
library(ROCR)
#type is default means type="prob"
(train.predict<-predict(rpart.prune))
#train.pre<-ifelse(train.predict[,2]>0.5,1,0)
#比较predict()的输出，确定预测的类标号
train.pred = prediction(train.predict[,2],TrainData$流失)
train.perf<-performance(train.pred,"tpr","fpr")
plot(train.perf,main="ROC Curve",col = "blue", lty = 1, lwd = 3)
(test.predict<-predict(rpart.prune,newdat=TestData))
test.pred = prediction(test.predict[,2],TestData$流失)
test.perf<-performance(test.pred,"tpr","fpr")
test.predict<-predict(rpart.prune,newdata = TestData)
#use performance() to compute tpr and  fpr??needing return value of prediction()
par(new=T)    #defaulting to FALSE.如果设定为TRUE，
#If set to TRUE, the next plotting should not clean the current
plot(test.perf,main="ROC Curve",col = "red", lty = 1, lwd = 3)
#lty = 3, lwd = 3 线型，宽度
#Add straight lines to a plot (a = intercept and b = slope)
abline(a= 0, b=1)
legend("bottomright",legend=c("training","testing"),bty="n",lty=c(3,3),col=c("blue","red"),cex=1)
# ******************** Gain Chart *****************************************#
#*******************************************************************
train.gain = performance(train.pred, "tpr", "rpp")
test.gain<-performance(test.pred,"tpr","rpp")
plot(train.gain,main="Gain Chart",col="blue",lty = 1, lwd = 3)
par(new=T)
plot(test.gain,main="Gain chart",col = "red", lty = 1, lwd = 3)
abline(a= 0, b=1)
legend("bottomright",legend=c("training","testing"),bty="n",lty=c(1,1),col=c("blue","red"),cex=1)
db <- available.packages()
deps <- tools::package_dependencies("ggvis", db)$ggvis
install.packages(deps)
install.packages(deps)
install.packages(deps)
install.packages(deps)
install.packages(deps)
#install.packages("rpart")
#install.packages("ipred")
library(ipred)
library(rpart)
library(adabag)
set.seed(123)
# read data
TelephoneData<-read.csv("/Users/zhao/Desktop/大三课作业/数据挖掘实验/Telephone.csv",head = TRUE,fileEncoding = 'GBK')
head(TelephoneData)
typeof(TelephoneData$流失)
ctrl<-rpart.control(maxdepth=30)
# testing and training
N <- length(TelephoneData[,1])#看第一列长度
N
sub <- sample(1:N,2*N/3)
train=TelephoneData[sub,]
TelephoneData$流失<-as.factor(TelephoneData$流失)
# implement bagging by the package of ipred
set.seed(12)
# nbagg:an integer giving the number of bootstrap
#replications. control 同rpart 设置
(bagModel_ipred<-bagging(流失~.,data=TelephoneData,nbagg=25,coob=TRUE,control=ctrl))
bagModel_ipred$importance
(sort(bagModel_ipred$importance))
# nbagg:an integer giving the number of bootstrap
replications. control 同rpart 设置
update.packages()
library(adabag)
library(adabag)
##########################Bagging ##############################
################################################################
install.packages("adabag")

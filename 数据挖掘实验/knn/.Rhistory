######################Classification of the customers of Tianmao###############
########Package: class，caret, kknn####################
install.packages("class")
######################Classification of the customers of Tianmao###############
########Package: class，caret, kknn####################
#install.packages("class")
library(class)
# Read data
Tmall_train<-read.table(file="E:/ExperimentRcodes/KNN/天猫_Train_1.txt",header=TRUE,sep=",")
# Read data
Tmall_train<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/knn/天猫_Train_1.txt",header=TRUE,sep=",")
Tmall_train
head(Tmall_train)
str(Tmall_train)
#table(Tmall_train$ BuyOrNot)
#prop.table(table(Tmall_train$ BuyOrNot))
round(prop.table(table(Tmall_train$ BuyOrNot))*100,digits = 1)
#小数点保留一位,查看两个类别样本数量所占百分比
Tmall_test<-read.table(file="E:/ExperimentRcodes/KNN/天猫_Test_1.txt",header=TRUE,sep=",")
#小数点保留一位,查看两个类别样本数量所占百分比
Tmall_test<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/knn/天猫_Test_1.txt",header=TRUE,sep=",")
round(prop.table(table(Tmall_test$ BuyOrNot))*100,digits = 1) #小数点保留一位
Tmall_train.lable<-Tmall_train[,1]
Tmall_test.lable<-Tmall_test[,1]
# nomalization: min-max
normalize<-function(x) {return((x-min(x))/(max(x)-min(x)))}
#test the function
normalize(c(1,2,3,4,5))
# 把normaize()函数应用到数据框Tamll_trian/Tmall_test第 2~5列，并把产生的结果列表转化成数据框。
(Tmall_train.n<-as.data.frame(lapply(Tmall_train[,2:5],normalize)))
summary(Tmall_train.n)
(Tmall_test.n<-as.data.frame(lapply(Tmall_test[,2:5],normalize)))
summary(Tmall_test.n)
Tmall_train.lable<-as.factor(Tmall_train.lable)
Tmall_test.lable<-as.factor(Tmall_test.lable)
set.seed(123456)
errRatio<-vector()
for(i in 1:30){
KnnFit<-knn(train=Tmall_train.n,test=Tmall_test.n,cl=Tmall_train.lable,k=i,prob=FALSE)
CT<-table(Tmall_test.lable,KnnFit)
errRatio<-c(errRatio,(1-sum(diag(CT))/sum(CT))*100)
}
CT
errRatio
plot(errRatio,type="b",xlab="近邻个数K",ylab="错判率(%)",main="天猫成交顾客分类预测中的近邻数K与错判率")
#model by caret package
#install.packages("caret")
library(caret)
set.seed(123456)
trainFit<-train(x=Tmall_train.n,y=Tmall_train.lable,method="knn")
#model by caret package
#install.packages("kknn")
library(kknn)
#model by caret package
install.packages("kknn")
#model by caret package
#install.packages("kknn")
library(kknn)
set.seed(123456)
#model by caret package
#install.packages("caret")
library(caret)
set.seed(123456)
trainFit<-train(x=Tmall_train.n,y=Tmall_train.lable,method="knn")
#model by caret package
#install.packages("kknn")
library(kknn)
set.seed(123456)
kknnFit1<-kknn(BuyOrNot~.,Tmall_train,test=Tmall_train,k=5)
kknnFit2<-kknn(BuyOrNot~.,Tmall_train,test=Tmall_test,k=5)
summary(kknnFit1)
library("class")
set.seed(123456)
errRatio<-vector()
# Determine parameter K
for(i in 1:30){
KnnFit<-knn(train=Tmall_train[,-1],test=Tmall_test[,-1],cl=Tmall_train[,1],k=i,prob=FALSE)
CT<-table(Tmall_test[,1],KnnFit)
errRatio<-c(errRatio,(1-sum(diag(CT))/sum(CT))*100)
}
CT
plot(errRatio,type="l",xlab="近邻个数K",ylab="错判率(%)",main="近邻数K与错判率")
errRatio
(errDelteX<-errRatio[7])
# find variable importance，cl:classlabel
for(i in -2:-5){
fit<-knn(train=Tmall_train[,c(-1,i)],test=Tmall_test[,c(-1,i)],cl=Tmall_train[,1],k=7)
CT<-table(Tmall_test[,1],fit)
errDelteX<-c(errDelteX,(1-sum(diag(CT))/sum(CT))*100)
#error rate with all variables, error rate without each variable
}
CT
plot(errRatio,type="l",xlab="近邻个数K",ylab="错判率(%)",main="近邻数K与错判率")
errRatio
(errDelteX<-errRatio[7])
# find variable importance，cl:classlabel
for(i in -2:-5){
fit<-knn(train=Tmall_train[,c(-1,i)],test=Tmall_test[,c(-1,i)],cl=Tmall_train[,1],k=7)
CT<-table(Tmall_test[,1],fit)
errDelteX<-c(errDelteX,(1-sum(diag(CT))/sum(CT))*100)
#error rate with all variables, error rate without each variable
#
}
CT
errDelteX
plot(errDelteX,type="l",xlab="剔除变量",ylab="剔除错判率(%)",main="剔除变量与错判率(K=7)",cex.main=0.8)
#cex:缩放比例。cex.main：标题的缩放
xTitle=c("1:全体变量","2:消费活跃度","3:活跃度","4:成交有效度","5:活动有效度")
#legend("topright",legend=xTitle,title="变量说明",lty=1,cex=0.4,y.intersp=0.3)
legend(x=4.5,y=7,legend=xTitle,lty=1,cex=0.5,y.intersp=0.16,x.intersp=0.1)
FI<-errDelteX[-1]+1/4 #the first element of errDeltex is
#the error rate with all variables. FI=e+1/p
wi<-FI/sum(FI)  # standardize
wi
#Concatenate vectors after converting to character. 向量转换成字符并连接
GLabs<-paste(c("消费活跃度","活跃度","成交有效度","活动有效度"),round(wi,2),sep=":")
GLabs
pie(wi,labels=GLabs,clockwise=TRUE,main="输入变量权重",cex.main=0.8)
ColPch=as.integer(as.vector(Tmall_test[,1]))+2
plot(Tmall_test[,c(2,4)],pch=ColPch,cex=0.7,xlim=c(0,50),ylim=c(0,50),col=ColPch,
xlab="消费活跃度",ylab="成交有效度",main="二维特征空间中的观测",cex.main=0.8)
#install.packages("kknn")
library("kknn")
Tmall_train<-read.table(file="E:/ExperimentRcodes/KNN/天猫_Train_1.txt",header=TRUE,sep=",")
Tmall_train<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/knn/天猫_Train_1.txt",header=TRUE,sep=",")
Tmall_train$BuyOrNot<-as.factor(Tmall_train$BuyOrNot)
Tmall_train
fit<-train.kknn(formula=BuyOrNot~.,data=Tmall_train,kmax=11,distance=2,kernel=c("rectangular","triangular","gaussian"),na.action=na.omit())
plot(fit$MISCLASS[,1]*100,type="l",main="不同核函数和近邻个数K下的错判率曲线图",cex.main=0.8,xlab="近邻个数K",ylab="错判率(%)")
lines(fit$MISCLASS[,2]*100,lty=2,col=1)
lines(fit$MISCLASS[,3]*100,lty=3,col=2)
#legend("topleft",legend=c("rectangular","triangular","gaussian"),lty=c(1,2,3),col=c(1,1,2),cex=0.7)   #给出图例
legend(x=0.8,y=0.6,legend=c("rectangular","triangular","gaussian"),lty=c(1,2,3),col=c(1,1,2),cex=0.6,y.intersp=0.12)   #给出图例
Tmall_test<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/knn/天猫_Test_1.txt",header=TRUE,sep=",")
Tmall_test$BuyOrNot<-as.factor(Tmall_test$BuyOrNot)
fit<-kknn(formula=BuyOrNot~.,train=Tmall_train,test=Tmall_test,k=7,distance=2,kernel="gaussian",na.action=na.omit())
(CT<-table(Tmall_test[,1],fit$fitted.values))
#fitted.values:近邻K依次取1至kmax时，各个观测的预测类别
(errRatio<-(1-sum(diag(CT))/sum(CT)))
###比较
library("class")
fit<-knn(train=Tmall_train,test=Tmall_test,cl=Tmall_train$BuyOrNot,k=7)
CT<-table(Tmall_test[,1],fit)
CT
errRatio<-c(errRatio,(1-sum(diag(CT))/sum(CT))*100)
errGraph<-barplot(errRatio,main="基于相似性K近邻法与K近邻法的错判率对比图(K=7)",cex.main=0.8,xlab="分类方法",ylab="错判率(%)",col="orange",axes=FALSE)
#side表示在图形的哪边绘制坐标轴（1=下，2=左，3=上，4=右）
#tcl：坐标轴刻度线的高度
#at : 需要添加刻度的数值
axis(side=1,at=c(0,errGraph,3),labels=c("","基于相似性K-近邻法","K-近邻法",""),tcl=0.25)
axis(side=2,tcl=0.25)
#install.packages("neuralnet")
library("neuralnet")
rm(list=ls(all=TRUE))
install.packages("neuralnet")
#install.packages("neuralnet")
library("neuralnet")
#read data. we still input "消费决策数据" .Income: 1 is high,2 is midlle, 3 is low.
#Gender: 1 is male, 2 is female
#purchase:0 is not buy, 1 is buy
Buy<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/ann/消费决策数据.txt", head = TRUE)
typeof(Buy$Purchase)e
typeof(Buy$Purchase)#e
Buy$Purchase
#model
set.seed(1234)
(BPnet1<-neuralnet(Purchase~+Age+Gender+Income,data=Buy,hidden=2,err.fct="sse",linear.output=FALSE))
# return of BPnet1()
BPnet1$result.matrix   #weights and other information
BPnet1$weights  #array that stores weights
BPnet1$response   #actural
BPnet1$net.result #predict
typeof(BPnet1$net.result)
#########网络及权值参数可视化###########
plot(BPnet1)
#####构建2个隐藏层的网络###########
(BPnet11<-neuralnet(Purchase~+Age+Gender+Income,data=Buy,hidden=c(2,2),act.fct = "logistic",stepmax = 20000))
#2 hidden layer and two neurons of each layer
plot(BPnet11)
#2 hidden layer and two neurons of each layer
plot(BPnet11)
# use NeuralNetTools to visualize ANN
#install.packages("NeuralNetTools")
library(NeuralNetTools)
# use NeuralNetTools to visualize ANN
install.packages("NeuralNetTools")
# use NeuralNetTools to visualize ANN
#install.packages("NeuralNetTools")
library(NeuralNetTools)
par(cex = 0.8)
plotnet(BPnet11,pos_col = "red", neg_col = "grey")
#正数权重使用红色的线连接、负的权重使用灰色的线连接
#线的粗细则反映权重的取值大小
#####################输入变量重要性及可视化#####################
# use NeuralNetTools to visualize the importance of variables
garson(BPnet1)
#####################不同输入变量水平组合下的预测#####################
#Effects of different combinations on output  性别和收入对是否购买的影响
(mean(Buy$Age))
#age最不重要，取均值39岁和性别以及收入进行各种组合，
#研究对消费决策的影响
newdata<-matrix(c(39,1,1,39,1,2,39,1,3,39,2,1,39,2,2,39,2,3),nrow=6,ncol=3,byrow=TRUE)
newdata
#predict()计算任意组合下输出节点的预测值
#同时利用predict()也可预测新样本
(BPnet11<-neuralnet(Purchase~+Age+Gender+Income,data=Buy,hidden=2,err.fct="ce",linear.output=FALSE))
#one hidden layer and two neur
newoutput<-predict(BPnet11,newdata)
newoutput
#####################确定概率分割值 ROC curve#####################
# avoiding conflit
# unload neuralnet package because both ROCR and neuralnet have prediction().
detach("package:neuralnet")
#install.packages("ROCR")
library("ROCR")
(BPnet1<-neuralnet(Purchase~+Age+Gender+Income,data=Buy,hidden=2,err.fct="ce",linear.output=FALSE))
#install.packages("neuralnet")
library("neuralnet")
(BPnet1<-neuralnet(Purchase~+Age+Gender+Income,data=Buy,hidden=2,err.fct="ce",linear.output=FALSE))
summary(BPnet1$net.result[[1]])#预测概率值
# 3rd Qu.:0.4788  上四分位0.48
pred<-prediction(predictions = as.vector(BPnet1$net.result),labels=BPnet1$response)
perf<-performance(pred,measure="tpr",x.measure="fpr")
# 3rd Qu.:0.4788  上四分位0.48
pred<-prediction(predictions = as.vector(BPnet1$net.result),labels=BPnet1$response)
detach("package:neuralnet")
pred<-prediction(predictions = as.vector(BPnet1$net.result),labels=BPnet1$response)
perf<-performance(pred,measure="tpr",x.measure="fpr")
plot(perf,colorize=TRUE,print.cutoffs.at=c(0.2,0.45,0.47,0.48))
# This vector specifies the cutoffs which should
#be printed as text along the curve at the corresponding curve positions.
#模型的总体精度随概率分割值变化
perf<-performance(pred,measure = "acc")
plot(perf)
#####################确定概率分割值 ROC curve#####################
# avoiding conflit
# unload neuralnet package because both ROCR and neuralnet have prediction().
detach("package:neuralnet")
#install.packages("ROCR")
library("ROCR")
(BPnet1<-neuralnet(Purchase~+Age+Gender+Income,data=Buy,hidden=2,err.fct="ce",linear.output=FALSE))
library("neuralnet")
#install.packages("ROCR")
library("ROCR")
(BPnet1<-neuralnet(Purchase~+Age+Gender+Income,data=Buy,hidden=2,err.fct="ce",linear.output=FALSE))
summary(BPnet1$net.result[[1]])#预测概率值
# 3rd Qu.:0.4788  上四分位0.48
pred<-prediction(predictions = as.vector(BPnet1$net.result),labels=BPnet1$response)
# 3rd Qu.:0.4788  上四分位0.48
detach("package:neuralnet")
pred<-prediction(predictions = as.vector(BPnet1$net.result),labels=BPnet1$response)
perf<-performance(pred,measure="tpr",x.measure="fpr")
plot(perf,colorize=TRUE,print.cutoffs.at=c(0.2,0.45,0.47,0.48))
#模型的总体精度随概率分割值变化
perf<-performance(pred,measure = "acc")
plot(perf)
# o.48附近的总体预测精确度较高，因此以概率值的上四分位数0.48作为概率分割值
#大于该值预测类别为1，否则为0.
BPnet1$net.result
out<-cbind(BPnet1$response,BPnet1$net.result[[1]])
out
outfinal<-cbind(out,ifelse(out[,2]>0.48,1,0))
outfinal
(confusion<-table(outfinal[,1],outfinal[,3]))
(err.BP<-(sum(confusion)-sum(diag(confusion)))/sum(confusion))
#if probability greater than 50 % then 1 else 0
nn1 = ifelse(BPnet1$net.result[[1]]>0.5,1,0)
(misClasificationError = mean(Buy$Purchase!=nn1))
###########################nnet package建立神经网络###############################
######建立三层网络
#install.packages("nnet")
library("nnet")
#install.packages("devtools",type = "win.binary")
library(devtools)
install.packages("devtools",type = "win.binary")
install.packages("devtools",type = "MacOS")
#install.packages("devtools",type = "win.binary")
install.packages("devtools", type = "source")
library(devtools)
######################Classification of the customers of Tianmao###############
########Package: class，caret, kknn####################
#install.packages("class")
library(class)
# Read data
Tmall_train<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/knn/天猫_Train_1.txt",header=TRUE,sep=",")
Tmall_train
head(Tmall_train)
str(Tmall_train)
######################Classification of the customers of Tianmao###############
########Package: class，caret, kknn####################
#install.packages("class")
library(class)
# Read data
Tmall_train<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/knn/天猫_Train_1.txt",header=TRUE,sep=",")
head(Tmall_train)
str(Tmall_train)
table(Tmall_train$ BuyOrNot)
#prop.table(table(Tmall_train$ BuyOrNot))
round(prop.table(table(Tmall_train$ BuyOrNot))*100,digits = 1)
#小数点保留一位,查看两个类别样本数量所占百分比
Tmall_test<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/knn/天猫_Test_1.txt",header=TRUE,sep=",")
round(prop.table(table(Tmall_test$ BuyOrNot))*100,digits = 1) #小数点保留一位
Tmall_train.lable<-Tmall_train[,1]
Tmall_test.lable<-Tmall_test[,1]
# nomalization: min-max
normalize<-function(x) {return((x-min(x))/(max(x)-min(x)))}
#test the function
normalize(c(1,2,3,4,5))
#test the function
normalize(c(1,2,3,4,5))
# 把normaize()函数应用到数据框Tamll_trian/Tmall_test第 2~5列，并把产生的结果列表转化成数据框。
(Tmall_train.n<-as.data.frame(lapply(Tmall_train[,2:5],normalize)))
summary(Tmall_train.n)
(Tmall_test.n<-as.data.frame(lapply(Tmall_test[,2:5],normalize)))
summary(Tmall_test.n)
Tmall_train.lable<-as.factor(Tmall_train.lable)
Tmall_test.lable<-as.factor(Tmall_test.lable)
set.seed(123456)
errRatio<-vector()
for(i in 1:30){
KnnFit<-knn(train=Tmall_train.n,test=Tmall_test.n,cl=Tmall_train.lable,k=i,prob=FALSE)
CT<-table(Tmall_test.lable,KnnFit)
errRatio<-c(errRatio,(1-sum(diag(CT))/sum(CT))*100)
}
CT
errRatio
plot(errRatio,type="b",xlab="近邻个数K",ylab="错判率(%)",main="天猫成交顾客分类预测中的近邻数K与错判率")
#model by caret package
#install.packages("caret")
library(caret)
set.seed(123456)
trainFit<-train(x=Tmall_train.n,y=Tmall_train.lable,method="knn")
#model by caret package
#install.packages("kknn")
library(kknn)
set.seed(123456)
errRatio<-vector()
for(i in 1:30){
KnnFit<-knn(train=Tmall_train.n,test=Tmall_test.n,cl=Tmall_train.lable,k=i,prob=FALSE)
CT<-table(Tmall_test.lable,KnnFit)
errRatio<-c(errRatio,(1-sum(diag(CT))/sum(CT))*100)
}
CT
errRatio
par(family="PingFangSC-Regular")
plot(errRatio,type="b",xlab="近邻个数K",ylab="错判率(%)",main="天猫成交顾客分类预测中的近邻数K与错判率")
#model by caret package
#install.packages("caret")
library(caret)
set.seed(123456)
trainFit<-train(x=Tmall_train.n,y=Tmall_train.lable,method="knn")
#model by caret package
#install.packages("kknn")
library(kknn)
set.seed(123456)
kknnFit1<-kknn(BuyOrNot~.,Tmall_train,test=Tmall_train,k=3)
kknnFit2<-kknn(BuyOrNot~.,Tmall_train,test=Tmall_test,k=3)
summary(kknnFit1)
library("class")
set.seed(123456)
errRatio<-vector()
# Determine parameter K
for(i in 1:30){
KnnFit<-knn(train=Tmall_train[,-1],test=Tmall_test[,-1],cl=Tmall_train[,1],k=i,prob=FALSE)
CT<-table(Tmall_test[,1],KnnFit)
errRatio<-c(errRatio,(1-sum(diag(CT))/sum(CT))*100)
}
CT
plot(errRatio,type="l",xlab="近邻个数K",ylab="错判率(%)",main="近邻数K与错判率")
errRatio
(errDelteX<-errRatio[7])
# find variable importance，cl:classlabel
for(i in -2:-5){
fit<-knn(train=Tmall_train[,c(-1,i)],test=Tmall_test[,c(-1,i)],cl=Tmall_train[,1],k=7)
CT<-table(Tmall_test[,1],fit)
errDelteX<-c(errDelteX,(1-sum(diag(CT))/sum(CT))*100)
#error rate with all variables, error rate without each variable
#
}
CT
errDelteX
plot(errDelteX,type="l",xlab="剔除变量",ylab="剔除错判率(%)",main="剔除变量与错判率(K=7)",cex.main=0.8)
#cex:缩放比例。cex.main：标题的缩放
xTitle=c("1:全体变量","2:消费活跃度","3:活跃度","4:成交有效度","5:活动有效度")
#legend("topright",legend=xTitle,title="变量说明",lty=1,cex=0.4,y.intersp=0.3)
legend(x=4.5,y=7,legend=xTitle,lty=1,cex=0.5,y.intersp=0.16,x.intersp=0.1)
FI<-errDelteX[-1]+1/4 #the first element of errDeltex is
#the error rate with all variables. FI=e+1/p
wi<-FI/sum(FI)  # standardize
wi
#install.packages("kknn")
library("kknn")
Tmall_train<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/knn/天猫_Train_1.txt",header=TRUE,sep=",")
Tmall_train$BuyOrNot<-as.factor(Tmall_train$BuyOrNot)
Tmall_train
fit<-train.kknn(formula=BuyOrNot~.,data=Tmall_train,kmax=11,distance=2,kernel=c("rectangular","triangular","gaussian"),na.action=na.omit())
plot(fit$MISCLASS[,1]*100,type="l",main="不同核函数和近邻个数K下的错判率曲线图",cex.main=0.8,xlab="近邻个数K",ylab="错判率(%)")
lines(fit$MISCLASS[,2]*100,lty=2,col=1)
lines(fit$MISCLASS[,3]*100,lty=3,col=2)
#legend("topleft",legend=c("rectangular","triangular","gaussian"),lty=c(1,2,3),col=c(1,1,2),cex=0.7)   #给出图例
legend(x=0.8,y=0.6,legend=c("rectangular","triangular","gaussian"),lty=c(1,2,3),col=c(1,1,2),cex=0.6,y.intersp=0.12)   #给出图例
Tmall_test<-read.table(file="/Users/zhao/Desktop/大三课作业/数据挖掘实验/knn/天猫_Test_1.txt",header=TRUE,sep=",")
Tmall_test$BuyOrNot<-as.factor(Tmall_test$BuyOrNot)
fit<-kknn(formula=BuyOrNot~.,train=Tmall_train,test=Tmall_test,k=7,distance=2,kernel="gaussian",na.action=na.omit())
(CT<-table(Tmall_test[,1],fit$fitted.values))
#fitted.values:近邻K依次取1至kmax时，各个观测的预测类别
(errRatio<-(1-sum(diag(CT))/sum(CT)))
###比较
library("class")
fit<-knn(train=Tmall_train,test=Tmall_test,cl=Tmall_train$BuyOrNot,k=7)
CT<-table(Tmall_test[,1],fit)
CT
errRatio<-c(errRatio,(1-sum(diag(CT))/sum(CT))*100)
errGraph<-barplot(errRatio,main="基于相似性K近邻法与K近邻法的错判率对比图(K=7)",cex.main=0.8,xlab="分类方法",ylab="错判率(%)",col="orange",axes=FALSE)
#side表示在图形的哪边绘制坐标轴（1=下，2=左，3=上，4=右）
#tcl：坐标轴刻度线的高度
#at : 需要添加刻度的数值
axis(side=1,at=c(0,errGraph,3),labels=c("","基于相似性K-近邻法","K-近邻法",""),tcl=0.25)
axis(side=2,tcl=0.25)
